# ✅ 現在の方針（まとめ）

## ① 【Botの表示名変更】
- Google Cloud インスタンス上で起動時に `@STAR管理bot` として表示。
- **対応方法**：Botの Discord アプリケーションの名前を Discord Developer Portal で変更。

## ② 【KPI機能】
- 日毎/週毎の数値（例：来店数・売上など）を記録・表示する機能。
- `keihi_discord` の `data/` や JSON構造を流用し、スラッシュコマンドまたはボタンで登録・表示。

## ③ 【凸スナの送信を他のテキストチャンネルにも転送】
- Embedメッセージ送信時に、指定のチャンネルIDへも複製。
- `messageCreate` イベントでファイル添付や送信内容を検出し、複数チャンネルへforward対応。

## ④ 【ChatGPT 実装予定】
- 例：チャットへの応答／FAQ／予定確認など。
- `openai` ライブラリと連携し、メッセージ送信に応じて ChatGPT 応答を返す設計。

## ⑤ 【「本日のキャスト」申請ボタン】
- `apply.js` のようなボタン処理により、キャスト本人が「本日出勤」を申請。
- メッセージ＋ボタンで日次確認可能な仕組み。申請内容はJSONで保存。

## ⑥ 【シフト申請ボタン（実装予定）】
- 曜日・時間帯を選択式で申請 → `data/shifts.json` のように記録。
- スラッシュコマンド `/shift` + ボタン or モーダル入力の組み合わせ。

## ⑦ 【その他の機能】
- 管理者通知
- 勤怠ログ表示
- 画像保存管理
- 各種リマインダー（出勤リマインド、報告催促 等）

---

## 🔧 開発サイクルの提案

1. **Bot起動 → 表示名確認（①）**
2. **凸スナ複製処理実装（③）**
3. **KPI登録・表示の整備（②）**
4. **「本日のキャスト」ボタンの導入（⑤）**
5. **ChatGPT連携準備・トーク処理実装（④）**
6. **シフト申請機能の設計とモーダル作成（⑥）**
7. **その他の機能整理・追加実装（⑦）**

---

## 🧩 `keihi_discord` から活用できそうな構造

- `data/*.json` の保存形式（例：`applies.json`, `cast.json`）
- `ボタン + モーダル入力` の処理パターン
- `commands/` と `buttons/` の明確な分離構造
- ID固定（例：`customId: 'apply'`）による中継設計
- 中央ハンドラー（`buttonsHandler.js`, `modalsHandler.js`）の設計思想の共通利用
